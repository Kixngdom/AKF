#!/bin/bash

# ============================================================
# AK Server Stop Script - Enhanced Version
# Made by Dulgan
# Features:
# - Stylish and colorful console messages
# - Enhanced logging with date-stamped filenames
# - Graceful stopping of server processes
# - Organized log management
# ============================================================

# -----------------------
# Color Codes
# -----------------------
RED='\e[0;31m'
GREEN='\e[1;32m'
YELLOW='\e[1;33m'
BLUE='\e[0;36m'
PURPLE='\e[0;35m'
CYAN='\e[0;36m'
MAGENTA='\e[0;35m'
NC='\e[0m' # No Color

# -----------------------
# Variables
# -----------------------
INSTALL_DIR="/root/hxsy"
LOG_DIR="$INSTALL_DIR/Logs"
CURRENT_DATE=$(date +%Y-%m-%d)

# -----------------------
# Introductory Message
# -----------------------
echo -e "${PURPLE}==================================================${NC}"
echo -e "${PURPLE}            AK Server Stop Script                 ${NC}"
echo -e "${PURPLE}                Made by Dulgan                   ${NC}"
echo -e "${PURPLE}==================================================${NC}\n"

# -----------------------
# Ensure Log Directory Exists
# -----------------------
if [[ -d "$LOG_DIR" ]]; then
    echo -e "${YELLOW}üóÑÔ∏è  Log directory already exists: $LOG_DIR${NC}"
    echo -e "${YELLOW}üßπ Clearing existing logs...${NC}"
    sudo rm -rf "$LOG_DIR"/* || { echo -e "${RED}‚ùå Failed to clear logs in $LOG_DIR${NC}"; exit 1; }
else
    echo -e "${GREEN}üóÑÔ∏è  Creating log directory: $LOG_DIR${NC}"
    mkdir -p "$LOG_DIR" || { echo -e "${RED}‚ùå Failed to create log directory: $LOG_DIR${NC}"; exit 1; }
fi

echo -e "${GREEN}‚úÖ Log directory is ready.${NC}\n"

# -----------------------
# Function to Clear System Logs
# -----------------------
clear_logs() {
    echo -e "${CYAN}üßπ Clearing system logs...${NC}"

    # Define system log files to clear
    SYSTEM_LOGS=(
        "/var/log/syslog"
        "/var/log/wtmp"
        "/var/log/maillog"
        "/var/log/messages"
        "/var/log/openwebmail.log"
        "/var/log/secure"
    )

    for log_file in "${SYSTEM_LOGS[@]}"; do
        if [[ -f "$log_file" ]]; then
            sudo truncate -s 0 "$log_file" || { echo -e "${RED}‚ùå Failed to clear $log_file${NC}"; exit 1; }
            echo -e "${GREEN}‚úîÔ∏è  Cleared $log_file${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Log file not found: $log_file${NC}"
        fi
    done

    echo -e "${GREEN}‚úÖ System logs cleared.${NC}\n"
}

# -----------------------
# Function to Move Server Logs
# -----------------------
move_server_logs() {
    local server_name=$1

    echo -e "${CYAN}üì¶ Moving logs for $server_name...${NC}"

    # Define the pattern for log files
    LOG_PATTERN="$INSTALL_DIR/$server_name/*.log.*"

    # Check if any log files exist
    if ls $LOG_PATTERN 1> /dev/null 2>&1; then
        # Move each log file with a date stamp
        for log_file in $LOG_PATTERN; do
            base_log_file=$(basename "$log_file")
            destination="$LOG_DIR/${server_name}_${CURRENT_DATE}_${base_log_file}"
            sudo mv "$log_file" "$destination" || { echo -e "${RED}‚ùå Failed to move $log_file to $destination${NC}"; exit 1; }
            echo -e "${GREEN}‚úîÔ∏è  Moved $base_log_file to $destination${NC}"
        done
    else
        echo -e "${YELLOW}‚ö†Ô∏è  No log files found for $server_name.${NC}"
    fi

    echo -e "${GREEN}‚úÖ Logs for $server_name moved successfully.${NC}\n"
}

# -----------------------
# Function to Stop Server Processes
# -----------------------
stop_server() {
    local server_name=$1
    echo -e "${CYAN}üî¥ Stopping $server_name...${NC}"
    sudo killall -9 "$server_name" 2>/dev/null

    if pgrep -f "$server_name" > /dev/null; then
        echo -e "${RED}‚ùå Failed to stop $server_name.${NC}"
    else
        echo -e "${GREEN}‚úîÔ∏è  $server_name stopped successfully.${NC}"
    fi
}

# -----------------------
# Main Execution Flow
# -----------------------

# Clear system logs
clear_logs

# List of servers to stop and move logs
SERVERS=("LoginServer" "GatewayServer" "TicketServer" "MissionServer" "WorldServer" "ZoneServer")

for server in "${SERVERS[@]}"; do
    stop_server "$server"
    move_server_logs "$server"
done

echo -e "${PURPLE}==================================================${NC}"
echo -e "${GREEN}üéâ All servers have been stopped and logs have been organized.${NC}"
echo -e "${PURPLE}==================================================${NC}"