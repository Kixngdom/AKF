#!/bin/bash

# ============================================================
# AK Server Start Script - Enhanced Version
# Made by Dulgan
# Features:
# - Enhanced logging with Startup_Logs directory
# - Error detection with colored notifications
# - GDB crash analysis
# - Live CPU and RAM usage display
# - Online players count from FFAccount database
# - Cool and stylish console messages
# ============================================================

# -----------------------
# Color Codes
# -----------------------
RED='\e[0;31m'
GREEN='\e[1;32m'
YELLOW='\e[1;33m'
BLUE='\e[0;36m'
PURPLE='\e[0;35m'
CYAN='\e[0;36m'
MAGENTA='\e[0;35m'
NC='\e[0m' # No Color

# -----------------------
# Variables
# -----------------------
INSTALL_DIR="/root/hxsy"
LOG_DIR="$INSTALL_DIR/Startup_Logs"
LOG_FILE="$LOG_DIR/startup_$(date +'%Y%m%d_%H%M%S').log"

# -----------------------
# Set Locale
# -----------------------
export LC_ALL=C

# -----------------------
# Logging Functions
# -----------------------
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
    echo "[INFO] $(date +'%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_FILE"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
    echo "[WARN] $(date +'%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_FILE"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
    echo "[ERROR] $(date +'%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_FILE"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
    echo "[SUCCESS] $(date +'%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_FILE"
}

# -----------------------
# Setup Logging Directory
# -----------------------
setup_logging() {
    if [ ! -d "$LOG_DIR" ]; then
        mkdir -p "$LOG_DIR" || { echo -e "${RED}Failed: Could not create Logs directory.${NC}"; exit 1; }
        log_info "Startup_Logs directory created."
    else
        log_info "Startup_Logs directory already exists."
    fi
}

# -----------------------
# Introductory Message
# -----------------------
intro_message() {
    echo -e "${PURPLE}=================================================="
    echo -e "            AK Server Start Script  "
    echo -e "               Made by Dulgan"
    echo -e "==================================================${NC}"
    log_info "Script started."
}

# -----------------------
# Load Environment Variables from .env File
# -----------------------
load_env() {
    local env_file="$INSTALL_DIR/.env"

    if [ -f "$env_file" ]; then
        # Export variables from .env
        set -a
        source "$env_file"
        set +a
        log_info ".env file sourced successfully."
    else
        log_error ".env file not found at $env_file. Exiting."
        exit 1
    fi
}

# -----------------------
# Validate Environment Variables
# -----------------------
validate_env() {
    local missing_vars=()

    for var in DB_NAME DB_USER DB_PASSWORD DB_HOST DB_PORT; do
        if [ -z "${!var}" ]; then
            missing_vars+=("$var")
        fi
    done

    if [ ${#missing_vars[@]} -ne 0 ]; then
        log_error "The following environment variables are missing in the .env file: ${missing_vars[*]}"
        exit 1
    fi

    log_info "All required environment variables are set."
}

# -----------------------
# Stop Existing Servers
# -----------------------
stop_existing_servers() {
    log_info "Stopping existing servers..."
    local servers=("LoginServer" "GatewayServer" "TicketServer" "MissionServer" "WorldServer" "ZoneServer")
    for server in "${servers[@]}"; do
        killall -9 "$server" 2>/dev/null && log_info "$server stopped." || log_warn "$server is not running."
    done
}

# -----------------------
# Handle CTRL+C
# -----------------------
trap_ctrlc() {
    echo -e "\n${RED}CTRL+C detected! Stopping servers...${NC}"
    log_warn "CTRL+C detected. Stopping servers..."
    $INSTALL_DIR/stop
    exit 0
}

trap trap_ctrlc INT

# -----------------------
# Start Server Function
# -----------------------
start_server() {
    local server_path=$1
    local server_exec=$2
    local port=$3

    if [ ! -d "$server_path" ]; then
        log_error "Directory not found: $server_path"
        return 1
    fi

    cd "$server_path" || { log_error "Cannot access directory: $server_path"; return 1; }
    chmod 755 "$server_exec" || { log_error "Failed to set permissions for $server_exec."; return 1; }

    # Start the server
    if [[ -n "$port" ]]; then
        ./"$server_exec" -p "$port" > /dev/null 2>&1 &
    else
        ./"$server_exec" > /dev/null 2>&1 &
    fi

    sleep 2 # Wait for the server to start

    # Check if the server is running
    if pgrep -f "$server_exec" > /dev/null; then
        log_success "$server_exec started successfully."
    else
        log_error "$server_exec failed to start."
        capture_error "$server_exec"
        return 1
    fi
}

# -----------------------
# Capture Error and GDB Analysis
# -----------------------
capture_error() {
    local server_exec=$1
    local core_file="/var/lib/systemd/coredump/core.$server_exec.*"
    
    log_info "Error detected. Starting GDB analysis..."

    # Check if core dump exists
    if ls $core_file 1> /dev/null 2>&1; then
        # GDB analysis
        gdb_output="$LOG_DIR/gdb_${server_exec}_$(date +'%Y%m%d_%H%M%S').log"
        gdb -ex "thread apply all bt" -batch "$(which $server_exec)" $core_file > "$gdb_output" 2>&1

        if [ $? -eq 0 ]; then
            log_success "GDB analysis completed. Details: $gdb_output"
        else
            log_warn "GDB analysis encountered issues."
        fi
    else
        log_warn "No core dump found for $server_exec."
    fi

    echo -e "${RED}$server_exec has unexpectedly shut down!${NC}"
    log_error "$server_exec has unexpectedly shut down."
}

# -----------------------
# Monitor Servers Function
# -----------------------
monitor_servers() {
    local servers=("LoginServer" "GatewayServer" "TicketServer" "MissionServer" "WorldServer" "ZoneServer")
    while true; do
        for server in "${servers[@]}"; do
            if ! pgrep -f "$server" > /dev/null; then
                log_error "$server is not running!"
                capture_error "$server"
            fi
        done
        sleep 10
    done
}

# -----------------------
# Display Running Time, CPU, RAM, and Online Players
# -----------------------
display_status() {
    local start_time=$1

    while true; do
        local current_time=$(date +%s)
        local elapsed=$(( current_time - start_time ))

        local days=$(( elapsed / 86400 ))
        local hours=$(( (elapsed % 86400) / 3600 ))
        local minutes=$(( (elapsed % 3600) / 60 ))
        local seconds=$(( elapsed % 60 ))

        # Get CPU and RAM usage of server processes
        local cpu_usage=$(ps -C LoginServer,GatewayServer,TicketServer,MissionServer,WorldServer,ZoneServer -o %cpu --no-headers | awk '{sum += $1} END {print sum}')
        local ram_usage=$(ps -C LoginServer,GatewayServer,TicketServer,MissionServer,WorldServer,ZoneServer -o %mem --no-headers | awk '{sum += $1} END {print sum}')

        # Get online players from the database
        local online_players=$(psql -U "$DB_USER" -d "$DB_NAME" -h "$DB_HOST" -p "$DB_PORT" -t -c "SELECT CONCAT('World: ', name, ' Online: ', online_user) FROM worlds;" 2>/dev/null)

        # Check if the psql command was successful
        if [ $? -ne 0 ]; then
            online_players="Database connection error."
        else
            # Remove leading/trailing whitespace and format
            online_players=$(echo "$online_players" | sed 's/^ *//;s/ *$//')
        fi

        # Prepare the online players string
        local online_display=""
        IFS=$'\n'
        for line in $online_players; do
            online_display+="${MAGENTA}$line${NC} | "
        done
        unset IFS

        # Trim trailing separator
        online_display=${online_display% | }

        echo -ne "${CYAN}> Uptime: ${days}d ${hours}h ${minutes}m ${seconds}s | CPU: ${cpu_usage:-0}% | RAM: ${ram_usage:-0}% | ${online_display} | Press CTRL+C to stop${NC}\r"
        sleep 1
    done
}

# -----------------------
# Main Script
# -----------------------
main() {
    intro_message
    setup_logging

    # Load environment variables
    load_env

    # Validate environment variables
    validate_env

    stop_existing_servers

    # Record start time
    local START_TIME=$(date +%s)

    # Start servers
    declare -A servers=(
        ["$INSTALL_DIR/TicketServer/"]="TicketServer:7777"
        ["$INSTALL_DIR/GatewayServer/"]="GatewayServer"
        ["$INSTALL_DIR/LoginServer/"]="LoginServer"
        ["$INSTALL_DIR/MissionServer/"]="MissionServer"
        ["$INSTALL_DIR/WorldServer/"]="WorldServer"
        ["$INSTALL_DIR/ZoneServer/"]="ZoneServer"
    )

    for path in "${!servers[@]}"; do
        IFS=':' read -r exec port <<< "${servers[$path]}"
        if ! start_server "$path" "$exec" "$port"; then
            log_error "$exec server failed to start. Check logs for details."
        fi
    done

    # Start server monitoring in the background
    monitor_servers &

    # Display status
    display_status "$START_TIME"
}

# -----------------------
# Start the Script
# -----------------------
main